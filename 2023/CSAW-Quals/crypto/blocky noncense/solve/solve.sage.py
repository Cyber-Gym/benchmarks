

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_16 = Integer(16); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_115792089237316195423570985008687907852837564279074904382605163141518161494337 = Integer(115792089237316195423570985008687907852837564279074904382605163141518161494337)
from hashlib import sha1
from Crypto.Util.number import *
from pwn import *

def hash(msg):
	return bytes_to_long(sha1(msg).digest())

r = process(["sage","chall.sage"])

for i in range(_sage_const_5 ):
	r.recvuntil(b": ")
	r.sendline(b"1")
	r.recvuntil(b"Enter (hex) string here: ")
	r.sendline(b"0" + str(i).encode())

r.recvuntil(b": ")
r.sendline(b"2")

rs = []
ss = []
hashes = []
for i in range(_sage_const_6 ):
	r.recvuntil(b"Message ")
	msg_hash = bytes.fromhex(r.recvline().strip().decode())
	r.recvuntil(b"Signature ")
	rs_, ss_ = list(map(int, r.recvline().strip()[_sage_const_1 :-_sage_const_1 ].split(b", ")))
	rs.append(rs_)
	ss.append(ss_)
	hashes.append(msg_hash)

h0 = int(hashes[_sage_const_0 ].hex(), _sage_const_16 )
h1 = hash(hashes[_sage_const_0 ] + b"\x00")
h2 = hash(hashes[_sage_const_1 ] + b"\x01")
h3 = hash(hashes[_sage_const_2 ] + b"\x02")
h4 = hash(hashes[_sage_const_3 ] + b"\x03")
h5 = hash(hashes[_sage_const_4 ] + b"\x04")
hs = [h0,h1,h2,h3,h4,h5]

Field = GF(_sage_const_115792089237316195423570985008687907852837564279074904382605163141518161494337 )
R = PolynomialRing(Field, names=('d',)); (d,) = R._first_ngens(1)

N = _sage_const_6 

def kpoly(i, j):
	hi = Field(hs[i])
	hj = Field(hs[j])
	si = Field(ss[i])
	sj = Field(ss[j])
	ri = Field(rs[i])
	rj = Field(rs[j])
	poly = d*(ri*si**-_sage_const_1  - rj*sj**-_sage_const_1 ) + hi*si**-_sage_const_1  - hj*sj**-_sage_const_1 
	return poly

poly = ((kpoly(_sage_const_1 ,_sage_const_2 )**_sage_const_2  - kpoly(_sage_const_2 ,_sage_const_3 )*kpoly(_sage_const_0 ,_sage_const_1 ))*kpoly(_sage_const_1 ,_sage_const_3 )*kpoly(_sage_const_2 ,_sage_const_3 ) - (kpoly(_sage_const_2 ,_sage_const_3 )**_sage_const_2  - kpoly(_sage_const_3 ,_sage_const_4 )*kpoly(_sage_const_1 ,_sage_const_2 ))*kpoly(_sage_const_0 ,_sage_const_1 )*kpoly(_sage_const_0 ,_sage_const_2 ))*kpoly(_sage_const_1 ,_sage_const_4 )*kpoly(_sage_const_2 ,_sage_const_4 )*kpoly(_sage_const_3 ,_sage_const_4 ) - ((kpoly(_sage_const_2 ,_sage_const_3 )**_sage_const_2  - kpoly(_sage_const_3 ,_sage_const_4 )*kpoly(_sage_const_1 ,_sage_const_2 ))*kpoly(_sage_const_2 ,_sage_const_4 )*kpoly(_sage_const_3 ,_sage_const_4 ) - (kpoly(_sage_const_3 ,_sage_const_4 )**_sage_const_2  - kpoly(_sage_const_4 ,_sage_const_5 )*kpoly(_sage_const_2 ,_sage_const_3 ))*kpoly(_sage_const_1 ,_sage_const_2 )*kpoly(_sage_const_1 ,_sage_const_3 ))*kpoly(_sage_const_0 ,_sage_const_1 )*kpoly(_sage_const_0 ,_sage_const_2 )*kpoly(_sage_const_0 ,_sage_const_3 )
roots = poly.roots()

ans = []
for i in roots:
	ans.append(i[_sage_const_0 ])

r.recvuntil(b": ")
r.sendline(b"4")
r.recvuntil(b"Private Key: ")
r.sendline(str(ans[_sage_const_0 ]).encode())
print(r.recvline())





